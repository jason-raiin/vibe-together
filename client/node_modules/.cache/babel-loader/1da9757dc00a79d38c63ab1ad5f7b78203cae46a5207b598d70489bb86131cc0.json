{"ast":null,"code":"import axios from 'axios';\nimport { Buffer } from 'buffer';\nimport { CLIENT_ID, CLIENT_SECRET, REDIRECT_URI } from './constants';\nexport const authString = Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64');\n\n//TODO: OOP-ify the functions\n//TODO: add functions to retrieve historical user data\n//TODO: implement database retrieval and addition methods\n//TODO: constant list could be expanded\n\nexport class SpotifyService {\n  async getAccessToken(code) {\n    try {\n      const payload = {\n        code: `${code}`,\n        redirect_uri: `${REDIRECT_URI}`,\n        grant_type: 'authorization_code'\n      };\n      const response = await axios.post('https://accounts.spotify.com/api/token', payload, {\n        headers: {\n          Authorization: `Basic ${authString}`,\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const {\n        accessToken,\n        tokenType,\n        scope,\n        refreshToken\n      } = response.data;\n      console.log(accessToken);\n      console.log(refreshToken);\n      console.log(tokenType);\n      console.log(scope);\n      const url = `https://api.spotify.com/v1/me/top/artists`;\n      const response2 = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`\n        }\n      });\n      console.log('User Profile:', response2.data);\n      return response2;\n    } catch (error) {\n      console.error('Failed to get access token:');\n    }\n  }\n  async getUserProfile() {\n    try {\n      console.log('accessToken:', this.accessToken);\n      const url = `https://api.spotify.com/v1/me/top/artists`;\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`\n        }\n      });\n      console.log('User Profile:', response.data);\n      return response;\n    } catch (error) {\n      console.error('Failed to get user profile:');\n    }\n  }\n}","map":{"version":3,"names":["axios","Buffer","CLIENT_ID","CLIENT_SECRET","REDIRECT_URI","authString","from","toString","SpotifyService","getAccessToken","code","payload","redirect_uri","grant_type","response","post","headers","Authorization","accessToken","tokenType","scope","refreshToken","data","console","log","url","response2","get","error","getUserProfile"],"sources":["/Users/jasonhuang/Documents/vibe-together/src/spotify/spotify.service.ts"],"sourcesContent":["import axios from 'axios';\nimport { Buffer } from 'buffer';\nimport { CLIENT_ID, CLIENT_SECRET, REDIRECT_URI } from './constants';\n\nexport const authString = Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString(\n  'base64',\n);\n\n//TODO: OOP-ify the functions\n//TODO: add functions to retrieve historical user data\n//TODO: implement database retrieval and addition methods\n//TODO: constant list could be expanded\n\nexport class SpotifyService {\n  async getAccessToken(code: string) {\n    try {\n      const payload = {\n        code: `${code}`,\n        redirect_uri: `${REDIRECT_URI}`,\n        grant_type: 'authorization_code',\n      };\n      const response = await axios.post(\n        'https://accounts.spotify.com/api/token',\n        payload,\n        {\n          headers: {\n            Authorization: `Basic ${authString}`,\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        },\n      );\n\n      const { accessToken, tokenType, scope, refreshToken } = response.data;\n\n      console.log(accessToken);\n      console.log(refreshToken);\n      console.log(tokenType);\n      console.log(scope);\n\n      const url = `https://api.spotify.com/v1/me/top/artists`;\n      const response2 = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`,\n        },\n      });\n\n      console.log('User Profile:', response2.data);\n      return response2;\n    } catch (error) {\n      console.error('Failed to get access token:');\n    }\n  }\n\n  async getUserProfile() {\n    try {\n      console.log('accessToken:', this.accessToken);\n      const url = `https://api.spotify.com/v1/me/top/artists`;\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`,\n        },\n      });\n\n      console.log('User Profile:', response.data);\n      return response;\n    } catch (error) {\n      console.error('Failed to get user profile:');\n    }\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,SAAS,EAAEC,aAAa,EAAEC,YAAY,QAAQ,aAAa;AAEpE,OAAO,MAAMC,UAAU,GAAGJ,MAAM,CAACK,IAAI,CAAE,GAAEJ,SAAU,IAAGC,aAAc,EAAC,CAAC,CAACI,QAAQ,CAC7E,QACF,CAAC;;AAED;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,CAAC;EAC1B,MAAMC,cAAcA,CAACC,IAAY,EAAE;IACjC,IAAI;MACF,MAAMC,OAAO,GAAG;QACdD,IAAI,EAAG,GAAEA,IAAK,EAAC;QACfE,YAAY,EAAG,GAAER,YAAa,EAAC;QAC/BS,UAAU,EAAE;MACd,CAAC;MACD,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAI,CAC/B,wCAAwC,EACxCJ,OAAO,EACP;QACEK,OAAO,EAAE;UACPC,aAAa,EAAG,SAAQZ,UAAW,EAAC;UACpC,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,MAAM;QAAEa,WAAW;QAAEC,SAAS;QAAEC,KAAK;QAAEC;MAAa,CAAC,GAAGP,QAAQ,CAACQ,IAAI;MAErEC,OAAO,CAACC,GAAG,CAACN,WAAW,CAAC;MACxBK,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;MACzBE,OAAO,CAACC,GAAG,CAACL,SAAS,CAAC;MACtBI,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;MAElB,MAAMK,GAAG,GAAI,2CAA0C;MACvD,MAAMC,SAAS,GAAG,MAAM1B,KAAK,CAAC2B,GAAG,CAACF,GAAG,EAAE;QACrCT,OAAO,EAAE;UACPC,aAAa,EAAG,UAAS,IAAI,CAACC,WAAY;QAC5C;MACF,CAAC,CAAC;MAEFK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEE,SAAS,CAACJ,IAAI,CAAC;MAC5C,OAAOI,SAAS;IAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,6BAA6B,CAAC;IAC9C;EACF;EAEA,MAAMC,cAAcA,CAAA,EAAG;IACrB,IAAI;MACFN,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACN,WAAW,CAAC;MAC7C,MAAMO,GAAG,GAAI,2CAA0C;MACvD,MAAMX,QAAQ,GAAG,MAAMd,KAAK,CAAC2B,GAAG,CAACF,GAAG,EAAE;QACpCT,OAAO,EAAE;UACPC,aAAa,EAAG,UAAS,IAAI,CAACC,WAAY;QAC5C;MACF,CAAC,CAAC;MAEFK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEV,QAAQ,CAACQ,IAAI,CAAC;MAC3C,OAAOR,QAAQ;IACjB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,6BAA6B,CAAC;IAC9C;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}